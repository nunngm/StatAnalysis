}
results[1,]= signif(as.double(results[1,]), digits=4)
if (noTukey ==T){
return(results)
}
y=NULL #this was designed to be an output variable if you need to output both stats table and tukey grouping
y$groups= HSD.test(anovaModel, alpha=0.05, "type", console=T)$groups#gives letter codes but no p values
y$stats=results
return(y)
}
stats = AutomatedStats(analysis)
View(stats$stats)+ View(stats$groups)
#Reset and read the data
rm(list=ls())
#mydata = read.csv(file = file.choose(),header=T) #pick a file
mydata= read.table(file= "clipboard",sep= "\t",header =T) #read from clipboard
##Set-up for Stats
library(agricolae)
library(car)
setup= function(md,forANOVA=F){
numcol= ncol(md)
mydp=data.frame()
orgData= data.frame()
orgData.names = NULL
mean_cfu=NULL
numrep=NULL
for (i in 1:numcol){
md[,i]= as.numeric(md[,i])
mydp = rbind(mydp,sd(md[,i],na.rm=T))
mean_cfu = rbind(mean_cfu, mean(md[,i],na.rm=T))
x=0
for (j in 1:nrow(md)){
orgData = rbind(orgData, md[j,i])
orgData.names = rbind(orgData.names, names(md)[i])
x=x+(1-as.integer(is.na(md[j,i])))
}
numrep = c(numrep,rep(x,each = j))
}
results = NULL
orgData = cbind(orgData.names,orgData,numrep)
names(orgData)= c("type","cfu","reps")
orgData = subset(orgData, reps >1 )
orgData = delete.na(orgData,"greater")
rownames(orgData) = 1:nrow(orgData)
mydp = cbind(names(md),mean_cfu,mydp)
names(mydp)= c("type","cfu","stdev")
if (forANOVA==T){
return(orgData)
}
results$orgData = orgData
results$groupData = mydp
return(results)
}
analysis=setup(mydata,forANOVA=T)
#Automated
AutomatedStats = function(md, noTukey = F){
results = matrix(NA,ncol =4,nrow =2)
colnames(results) = c("ANOVA","Shapiro-Wilk","Levene","Bartlett")
rownames(results) = c("P-value","Result")
anovaModel = aov(cfu ~ type, data=md) #the numeric variable must be first in this expression
r = summary(anovaModel)
results[1,1] = r[[1]]$`Pr(>F)`[1]
md.lm = lm(cfu ~ type, data = md)
md.res = resid(md.lm)
results[1,2]=shapiro.test(md.res)[2]$p.value
library(car)
results[1,3]=leveneTest(cfu ~ type, data=md)[3][1,1]
results[1,4] = bartlett.test(cfu ~ type, data=md)[3]$p.value
par(mfrow = c(2,2))
plot(md.lm)
par(mfrow = c(1,1))
library(agricolae)
results[2,] = rep("FAIL",each = ncol(results))
if (as.numeric(results[1,1])<=0.05){
results[2,1]= "PASS"
}
for (i in 2:ncol(results)){
if (as.numeric(results[1,i])>0.05){
results[2,i]="PASS"
}
}
results[1,]= signif(as.double(results[1,]), digits=4)
if (noTukey ==T){
return(results)
}
y=NULL #this was designed to be an output variable if you need to output both stats table and tukey grouping
y$groups= HSD.test(anovaModel, alpha=0.05, "type", console=T)$groups#gives letter codes but no p values
y$stats=results
return(y)
}
stats = AutomatedStats(analysis)
View(stats$stats)+ View(stats$groups)
##Failure, so you must go back and log data
analysis[,2]= log10(analysis[,2]) #Now redo anova and assumptions
stats = AutomatedStats(analysis)
View(stats$stats)+ View(stats$groups)
#Reset and read the data
rm(list=ls())
#mydata = read.csv(file = file.choose(),header=T) #pick a file
mydata= read.table(file= "clipboard",sep= "\t",header =T) #read from clipboard
##Set-up for Stats
library(agricolae)
library(car)
setup= function(md,forANOVA=F){
numcol= ncol(md)
mydp=data.frame()
orgData= data.frame()
orgData.names = NULL
mean_cfu=NULL
numrep=NULL
for (i in 1:numcol){
md[,i]= as.numeric(md[,i])
mydp = rbind(mydp,sd(md[,i],na.rm=T))
mean_cfu = rbind(mean_cfu, mean(md[,i],na.rm=T))
x=0
for (j in 1:nrow(md)){
orgData = rbind(orgData, md[j,i])
orgData.names = rbind(orgData.names, names(md)[i])
x=x+(1-as.integer(is.na(md[j,i])))
}
numrep = c(numrep,rep(x,each = j))
}
results = NULL
orgData = cbind(orgData.names,orgData,numrep)
names(orgData)= c("type","cfu","reps")
orgData = subset(orgData, reps >1 )
orgData = delete.na(orgData,"greater")
rownames(orgData) = 1:nrow(orgData)
mydp = cbind(names(md),mean_cfu,mydp)
names(mydp)= c("type","cfu","stdev")
if (forANOVA==T){
return(orgData)
}
results$orgData = orgData
results$groupData = mydp
return(results)
}
analysis=setup(mydata,forANOVA=T)
#Automated
AutomatedStats = function(md, noTukey = F){
results = matrix(NA,ncol =4,nrow =2)
colnames(results) = c("ANOVA","Shapiro-Wilk","Levene","Bartlett")
rownames(results) = c("P-value","Result")
anovaModel = aov(cfu ~ type, data=md) #the numeric variable must be first in this expression
r = summary(anovaModel)
results[1,1] = r[[1]]$`Pr(>F)`[1]
md.lm = lm(cfu ~ type, data = md)
md.res = resid(md.lm)
results[1,2]=shapiro.test(md.res)[2]$p.value
library(car)
results[1,3]=leveneTest(cfu ~ type, data=md)[3][1,1]
results[1,4] = bartlett.test(cfu ~ type, data=md)[3]$p.value
par(mfrow = c(2,2))
plot(md.lm)
par(mfrow = c(1,1))
library(agricolae)
results[2,] = rep("FAIL",each = ncol(results))
if (as.numeric(results[1,1])<=0.05){
results[2,1]= "PASS"
}
for (i in 2:ncol(results)){
if (as.numeric(results[1,i])>0.05){
results[2,i]="PASS"
}
}
results[1,]= signif(as.double(results[1,]), digits=4)
if (noTukey ==T){
return(results)
}
y=NULL #this was designed to be an output variable if you need to output both stats table and tukey grouping
y$groups= HSD.test(anovaModel, alpha=0.05, "type", console=T)$groups#gives letter codes but no p values
y$stats=results
return(y)
}
stats = AutomatedStats(analysis)
View(stats$stats)+ View(stats$groups)
##Failure, so you must go back and log data
analysis[,2]= log10(analysis[,2]) #Now redo anova and assumptions
stats = AutomatedStats(analysis)
View(stats$stats)+ View(stats$groups)
#clear the global environment
rm(list=ls())
mydata= read.table(file= "clipboard",sep= "\t",header =T) #read from clipboard
View(mydata)
mydata= read.table(file= "clipboard",sep= "\t",header =F,stringsAsFactors = F) #read from clipboard
age=t(mydata[1,2:ncol(mydata)])
rownames(mydata)=mydata[,1]
mydata = t(mydata[2:nrow(mydata),2:ncol(mydata)])
mydata <- as.data.frame(apply(mydata,FUN= as.numeric,MARGIN=c(1,2)))
# stuff = ordered(mydp,levels = c("young","mature"))
# orgData = as.numeric(mydata[1:nrow(mydata),2:ncol(mydata)])
mydp= NULL
orgData= data.frame()
mean_cfu=NULL
mydp.age = NULL
for (i in 1:ncol(mydata)){
mean_cfu = rbind(mean_cfu,mean(mydata[1:3,i],na.rm=T))
mean_cfu = rbind(mean_cfu,mean(mydata[4:6,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[1:3,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[4:6,i],na.rm =T))
mydp.age =rbind(mydp.age,age[1])
mydp.age = rbind(mydp.age,age[4])
}
mydp = cbind(rep(colnames(mydata[,1:ncol(mydata)]),each =2),mean_cfu,mydp,mydp.age)
colnames(mydp) = c("type","cfu","stdev","age")
orgData.names = as.data.frame(rep(colnames(mydata),each = 6))
orgData.age = as.data.frame(rep(age, times = ncol(mydata)))
orgData = unlist(mydata)
names(orgData)= rep_len(NA, length(orgData))
orgData = cbind(orgData.names,orgData,orgData.age)
colnames(orgData) = c("type","cfu","age")
rm(orgData.names,age,orgData.age,mydp.age,i,mean_cfu)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
##young and old plants (make sure to copy formatted based on file "ARR Expr.pzfx":ARR-17-3)
{
rm(list=ls())
mydata= read.table(file= "clipboard",sep= "\t",header =F,stringsAsFactors = F) #read from clipboard
age=t(mydata[1,2:ncol(mydata)])
rownames(mydata)=mydata[,1]
mydata = t(mydata[2:nrow(mydata),2:ncol(mydata)])
mydata <- as.data.frame(apply(mydata,FUN= as.numeric,MARGIN=c(1,2)))
# stuff = ordered(mydp,levels = c("young","mature"))
# orgData = as.numeric(mydata[1:nrow(mydata),2:ncol(mydata)])
mydp= NULL
orgData= data.frame()
mean_cfu=NULL
mydp.age = NULL
for (i in 1:ncol(mydata)){
mean_cfu = rbind(mean_cfu,mean(mydata[1:3,i],na.rm=T))
mean_cfu = rbind(mean_cfu,mean(mydata[4:6,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[1:3,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[4:6,i],na.rm =T))
mydp.age =rbind(mydp.age,age[1])
mydp.age = rbind(mydp.age,age[4])
}
mydp = cbind(rep(colnames(mydata[,1:ncol(mydata)]),each =2),mean_cfu,mydp,mydp.age)
colnames(mydp) = c("type","cfu","stdev","age")
orgData.names = as.data.frame(rep(colnames(mydata),each = 6))
orgData.age = as.data.frame(rep(age, times = ncol(mydata)))
orgData = unlist(mydata)
names(orgData)= rep_len(NA, length(orgData))
orgData = cbind(orgData.names,orgData,orgData.age)
colnames(orgData) = c("type","cfu","age")
rm(orgData.names,age,orgData.age,mydp.age,i,mean_cfu)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
}
##ANOVA for young and old
{
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#pass if p>0.05
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
anovaModel$model$mixed = make.unique(as.character(anovaModel$model$mixed))
hsd
}
orgData[]= orgData[(-21,)]
orgData[]= orgData[(-21),]
orgData[]= orgData[,(-21)]
View(orgData)
orgData[]= orgData[(-21),]
orgData[]= orgData[-21,]
orgData= orgData[-21,]
anovaModel = aov(cfu ~ mixed, data = orgData)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
##young and old plants (make sure to copy formatted based on file "ARR Expr.pzfx":ARR-17-3)
{
rm(list=ls())
mydata= read.table(file= "clipboard",sep= "\t",header =F,stringsAsFactors = F) #read from clipboard
age=t(mydata[1,2:ncol(mydata)])
rownames(mydata)=mydata[,1]
mydata = t(mydata[2:nrow(mydata),2:ncol(mydata)])
mydata <- as.data.frame(apply(mydata,FUN= as.numeric,MARGIN=c(1,2)))
# stuff = ordered(mydp,levels = c("young","mature"))
# orgData = as.numeric(mydata[1:nrow(mydata),2:ncol(mydata)])
mydp= NULL
orgData= data.frame()
mean_cfu=NULL
mydp.age = NULL
for (i in 1:ncol(mydata)){
mean_cfu = rbind(mean_cfu,mean(mydata[1:3,i],na.rm=T))
mean_cfu = rbind(mean_cfu,mean(mydata[4:6,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[1:3,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[4:6,i],na.rm =T))
mydp.age =rbind(mydp.age,age[1])
mydp.age = rbind(mydp.age,age[4])
}
mydp = cbind(rep(colnames(mydata[,1:ncol(mydata)]),each =2),mean_cfu,mydp,mydp.age)
colnames(mydp) = c("type","cfu","stdev","age")
orgData.names = as.data.frame(rep(colnames(mydata),each = 6))
orgData.age = as.data.frame(rep(age, times = ncol(mydata)))
orgData = unlist(mydata)
names(orgData)= rep_len(NA, length(orgData))
orgData = cbind(orgData.names,orgData,orgData.age)
colnames(orgData) = c("type","cfu","age")
rm(orgData.names,age,orgData.age,mydp.age,i,mean_cfu)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
}
##ANOVA for young and old
{
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#pass if p>0.05
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
anovaModel$model$mixed = make.unique(as.character(anovaModel$model$mixed))
hsd
}
orgData = orgData[-21,]
View(orgData)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
##if it fails
orgData[,2]=log10(orgData[,2])
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
#Reset and read the data (row,col)
rm(list=ls())
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
write.csv(newData,"analyzed.csv")
}
makeAMATable("AMA-18-2.csv")
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
}
makeAMATable("AMA-18-2.csv")
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
makeAMATable("AMA-18-2.csv")
data = makeAMATable("AMA-18-2.csv")
View(data)
apply(df, 2, function(x) x - x[2])
df_new <- as.data.frame(lapply(data, FUN=function(x) x-x[1]))
View(df_new)
#Reset and read the data (row,col)
rm(list=ls())
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
data = makeAMATable("AMA-18-2.csv")
filename = "AMA-18-2.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rm(mydata)
rm(data)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
View(mydata)
filename = "AMA-18-2v2.csv"
data = makeAMATable("AMA-18-2v2.csv")
View(data)
#Reset and read the data (row,col)
rm(list=ls())
data = makeAMATable("AMA-18-2v2.csv")
mydata <- read.table("AMA-18-2v2.csv",sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)=="Blank"])
newData = mydata[9:193,colnames(mydata)!="Blank"] - blankAvg
myData = mydata[9:193,colnames(mydata)!="Blank"] - blankAvg
mydata = mydata[9:193,colnames(mydata)!="Blank"] - blankAvg
rm(myData)
rm(newData)
blankAvg = as.numeric(mydata[,1])
df = mydata-blankAvg
blankAvg = as.numeric(mydata[1,])
df = mydata-blankAvg
View(mydata)
View(df)
rm(df)
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
View(df)
df = df+mean(mydata[1,])
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
blankAvg = mean(mydata[1,])
View(mydata)
blankAvg = mean(as.numeric(mydata[1,]))
df = df+mean(as.numeric(mydata[1,]))
View(df)
blankAvg = round(blankAvg,digits= 6)
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
blankAvg = as.numeric(mydata[1,])
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
df = df+round(mean(as.numeric(mydata[1,])),digits=6)
blankAvg = as.numeric(mydata[1,])
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
df = df+round(mean(as.numeric(mydata[1,])),digits=5)
df = df[as.numeric(rownames(newData))%%2==0,]
df = df[as.numeric(rownames(df))%%2==0,]
write.csv(df, "analyzed.csv")
