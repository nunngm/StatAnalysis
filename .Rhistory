mydata = mydata[,order(colnames(mydata))] #Sort by column name
write.csv(mydata,paste0("analyzed_",filename))
mydata
}
mydata = makeAMATable("AMA-18-5.csv")
View(mydata)
setwd("C:/Users/garre/OneDrive/Documents/Undergrad and Masters/Data/R WD/StatAnalysis")
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="^blank.*"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
#Select only desired rows
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
#mydata = mydata[,order(colnames(mydata))] #Sort by column name
write.csv(mydata,paste0("analyzed_",filename))
mydata
}
mydata = makeAMATable("AMA-18-5.csv")
View(mydata)
#Reset and read the data (row,col)
rm(list=ls())
setwd("C:/Users/garre/OneDrive/Documents/Undergrad and Masters/Data/R WD/StatAnalysis")
filename = "AMA-18-2.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
blankName="^blank.*"
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
View(mydata)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
mdata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
help = mydata[,10]-blankAvg
help==mdata[,10]
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
everyHour=2
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
#mydata = mydata[,order(colnames(mydata))] #Sort by column name
write.csv(mydata,paste0("analyzed_",filename))
t.test(mydata[,2],mydata[,3])
t.test(mydata[1,2],mydata[1,3])
t.test(mydata[1,2:5],mydata[1,6:9])
rm(mdata)
rm(help, blankAvg)
mydata = mydate[,-1]
View(mydata)
colnames(mydata)
theNames = colnames(mydata)
rm(theNames)
colum = colnames(mydata)
colum = strsplit(colum,split = "_")
View(colum)
colum = as.data.frame.character(colum)
colum = colnames(mydata)
colum = strsplit(colum,split = c("_","."))
View(colum)
as.data.frame(colum)
as.data.frame(colum[])
as.data.frame(colum[[]])
str(colum)
colum = colnames(mydata)
colum = as.character(colnames(mydata))
colum = strsplit(colum,split = "_")
View(colum)
colum[[1]]
colum[1]
colum[[]]
length[colum]
as.list(colum)
colum[,1]
colum[1,]
unlist(colum,recursive = F)
unlist(colum,recursive = T)
colum = unlist(strsplit(colum,split = "_"),recursive = F)
colum = as.character(colnames(mydata))
colum = unlist(strsplit(colum,split = "_"),recursive = F)
length(mydata)
length(colum)*2 ==length(mydata)
length(colum)/2 ==length(mydata)
if (length(colum)/2 !=length(mydata)){stop("There is an error in your column names")}
colum = as.character(colnames(mydata))
colum = colnames(mydata)
size = length(colum)
colum = strsplit(colum,split = "_")
df= data.frame()
for (i in 1:length(mydata)){
df = rbind(df,colum[i])
}
View(df)
df= data.frame()
for (i in 1:length(mydata)){
df = rbind(df,colum[[i]])
}
View(df)
View(df)
colum[[1]]
df= data.frame()
df = rbind(df,colum[[1]])
View(df)
df = rbind(df,colum[[2]])
colum = colnames(mydata)
colum = as.character(strsplit(colum,split = "_"))
df= data.frame()
for (i in 1:length(mydata)){
df = rbind(df,colum[[i]])
}
colum
colum = colnames(mydata)
colum = strsplit(colum,split = "_")
View(colum)
type(colum[[1]])
typeof(colum[[1]])
typeof(colum[[1]][1])
typeof(colum[[1]][2])
typeof(colum[[1]][3])
colum[[1]]
help =colum[[1]]
colum = colnames(mydata)
colum = strsplit(colum,split = "_")
for (i in 1:length(mydata)){
print(colum[[i]])
}
df= data.frame()
df = list()
df2 = list()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
}
View(df)
unlist(colum[[1]][1])
df = list()
df2 = list()
for (i in 1:length(mydata)){
df =c(df,unlist(colum[[i]][1]))
df2 = c(df2,unlist(colum[[i]][2]))
}
View(df)
df = character()
df2 = character()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
}
colum[1]
colum[2]
colum[3]
colum[4]
unlist(colum[4])
help =data.frame()
df = character()
df2 = character()
help =data.frame()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
help = rbind(help,unlist(colum[i]))
}
View(help)
colum[1][1]
colum[1][[1]]
colum[[1]]
colum[[1]][1]
colum[1][[1]]
x = colum[1][[1]]
x = colum[2][[1]]
x = colum[3][[1]]
x = as.data.frame(x)
View(x)
help =data.frame()
df = character()
df2 = character()
help =data.frame()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
help = rbind(help,as.data.frame(colum[[i]]))
}
View(help)
help =data.frame()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
help = cbind(help,as.data.frame(colum[[i]]))
}
df = character()
df2 = character()
help =data.frame()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
help = cbind(help,as.data.frame(colum[[i]]))
}
df = character()
df2 = character()
help =data.frame()
for (i in 1:length(mydata)){
df =c(df,colum[[i]][1])
df2 = c(df2,colum[[i]][2])
help = rbind(help,as.data.frame(colum[[i]]))
}
View(help)
i = 1
df =c(colum[[i]][1],colum[[i]][2])
help =data.frame()
help = rbind(help,df)
i= i+1
df =c(colum[[i]][1],colum[[i]][2])
help = rbind(help,df)
df =c(colum[[i]][1],as.character(colum[[i]][2]))
help = rbind(help,df)
help =data.frame(stringsAsFactors = F)
for (i in 1:length(mydata)){
df =c(colum[[i]][1],as.character(colum[[i]][2]))
help = rbind(help,df)
}
help =data.frame(stringsAsFactors = F)
for (i in 1:length(mydata)){
df =c(colum[[i]][1],as.character(colum[[i]][2]))
help = rbind(help,df,stringsAsFactors =F)
}
View(help)
help =data.frame()
for (i in 1:length(mydata)){
df =c(colum[[i]][1],colum[[i]][2])
help = rbind(help,df,stringsAsFactors =F)
}
View(help)
df= help
rm(help)
grep(pattern = df[1,1],df[1,])
View(df)
grep(pattern = df[1,1],df[1,], ignore.case = T)
grepl(pattern = df[1,1],df[1,], ignore.case = T)
grepl(pattern = df[1,1],df[,1], ignore.case = T)
grepl(pattern = df[1,1],df[,1], ignore.case = T)
grep(pattern = df[1,1],df[,1], ignore.case = T)
levels(df[,1])
unique(df[,1])
df[,1]= as.factor(df[,1],levels=unique(df[,1]))
df[,1]
levels(df[,1])
df[,1]= as.factor(df[,1])
levels(df[,1])
nlevels(df[,1])
help =data.frame
help =data.frame()
help =data.frame()
i = 1
grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
View(colum)
View(mydata)
help = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
df[help,2]
colum = df[grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T),2]
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = grep(pattern = "^PS1.*",df[colum,2])
wt = grepRaw(pattern = "^PS1.*",df[colum,2])
wt = grepl(pattern = "^PS1.*",df[colum,2])
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[-wt]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
length(mydata)
seq_along(mydata)
seq_len(mydata)
nrows(mydata)
nrow(mydata)
result =[]
result =NULL
mat = matrix(nrow = nrow(mydata),ncol = nlevels[,1])
mat = data.frame(nrow = nrow(mydata),ncol = nlevels[,1])
mat = matrix(,nrow = nrow(mydata),ncol = nlevels[,1])
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
View(mat)
colnames(mat)= levels(df[,1])
View(mat)
matrix(data, nrow = rows, ncol = cols)
j=1
result[i,j]=t.test(mydata[j,wt],mydata[j,colum])
mat[i,j]=t.test(mydata[j,wt],mydata[j,colum])
t.test(mydata[j,wt],mydata[j,colum])
View(mydata)
mydata[j,wt]
j=2
mydata[j,wt]
mydata[j,colum]
t.test(mydata[j,wt],mydata[j,colum])
str(t.test(mydata[j,wt],mydata[j,colum]))
t.test(mydata[j,wt],mydata[j,colum])
mat[i,j]=t.test(mydata[j,wt],mydata[j,colum])$p.value
function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
View(mat)
rm(mat)
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[i,j]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
colnames(mat)= levels(df[,1])
View(mat)
rm(mat)
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
View(mat)
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[i,j]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
rm(mat)
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
View(mat)
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[j,i]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
mat = mat <0.05
grep(pattern= T,mat)
AMATTest = function(mydata){
colum = colnames(mydata)
colum = strsplit(colum,split = "_")
df =data.frame()
for (i in 1:length(mydata)){
help =c(colum[[i]][1],colum[[i]][2])
df = rbind(df,help,stringsAsFactors =F) #strings as factors ruins everything
}
df[,1]= as.factor(df[,1])
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[j,i]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
mat = mat <0.05
mat
}
#Reset and read the data (row,col)
rm(list=ls())
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="^blank.*"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
#Select only desired rows
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
#mydata = mydata[,order(colnames(mydata))] #Sort by column name
write.csv(mydata,paste0("analyzed_",filename))
mydata
}
setwd("C:/Users/garre/OneDrive/Documents/Undergrad and Masters/Data/R WD/StatAnalysis")
filename = "analyzed_AMA-18-4.csv"
AMATTest = function(mydata){
colum = colnames(mydata)
colum = strsplit(colum,split = "_")
df =data.frame()
for (i in 1:length(mydata)){
help =c(colum[[i]][1],colum[[i]][2])
df = rbind(df,help,stringsAsFactors =F) #strings as factors ruins everything
}
df[,1]= as.factor(df[,1])
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[j,i]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
mat = mat <0.05
mat
}
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
View(mydata)
help = AMATTest(mydata)
View(help)
rownames(mat)= rownames(mydata)
rownames(help)= rownames(mydata)
View(help)
filename = "analyzed_AMA-18-5.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
help = AMATTest(filename)
filename = "AMA-18-5.csv"
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="^blank.*"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
#Select only desired rows
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
#mydata = mydata[,order(colnames(mydata))] #Sort by column name
write.csv(mydata,paste0("analyzed_",filename))
mydata
}
makeAMATable(filename)
mydata=makeAMATable(filename)
View(mydata)
help = AMATTest(mydata)
help = AMATTest(mydata)
colum = colnames(mydata)
colum
colum = strsplit(colum,split = "_")
df =data.frame()
for (i in 1:length(mydata)){
help =c(colum[[i]][1],colum[[i]][2])
df = rbind(df,help,stringsAsFactors =F) #strings as factors ruins everything
}
df[,1]= as.factor(df[,1])
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[j,i]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
t.test(mydata[j,wt],mydata[j,colum])
mydata[j,wt]
mydata[j,colum]
levels(df[,1])[i]
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="^blank.*"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
#Select only desired rows
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
#mydata = mydata[,order(colnames(mydata))] #Sort by column name
write.csv(mydata,paste0("analyzed_",filename))
mydata
}
filename = "AMA-18-5.csv"
mydata = makeAMATable("AMA-18-5.csv")
AMATTest = function(mydata){
colum = colnames(mydata)
colum = strsplit(colum,split = "_")
df =data.frame()
for (i in 1:length(mydata)){
help =c(colum[[i]][1],colum[[i]][2])
df = rbind(df,help,stringsAsFactors =F) #strings as factors ruins everything
}
df[,1]= as.factor(df[,1])
mat = matrix(,nrow = nrow(mydata),ncol = nlevels(df[,1]))
colnames(mat)= levels(df[,1])
for (i in 1:nlevels(df[,1])){
colum = grep(pattern = levels(df[,1])[i],df[,1], ignore.case = T)
wt = colum[grep(pattern = "^PS1.*",df[colum,2])]
colum = colum[grep(pattern = "^PS392.*",df[colum,2])]
for (j in 1:nrow(mydata)){
mat[j,i]=t.test(mydata[j,wt],mydata[j,colum])$p.value
}
}
mat = mat <0.05
rownames(mat)= rownames(mydata)
mat
}
help = AMATTest(mydata)
View(help)
colsums(help)
colSums(help)
