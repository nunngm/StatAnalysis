orgData = unlist(mydata)
names(orgData)= rep_len(NA, length(orgData))
orgData = cbind(orgData.names,orgData,orgData.age)
colnames(orgData) = c("type","cfu","age")
rm(orgData.names,age,orgData.age,mydp.age,i,mean_cfu)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
}
##ANOVA for young and old
{
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#pass if p>0.05
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
anovaModel$model$mixed = make.unique(as.character(anovaModel$model$mixed))
hsd
}
orgData[]= orgData[(-21,)]
orgData[]= orgData[(-21),]
orgData[]= orgData[,(-21)]
View(orgData)
orgData[]= orgData[(-21),]
orgData[]= orgData[-21,]
orgData= orgData[-21,]
anovaModel = aov(cfu ~ mixed, data = orgData)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
##young and old plants (make sure to copy formatted based on file "ARR Expr.pzfx":ARR-17-3)
{
rm(list=ls())
mydata= read.table(file= "clipboard",sep= "\t",header =F,stringsAsFactors = F) #read from clipboard
age=t(mydata[1,2:ncol(mydata)])
rownames(mydata)=mydata[,1]
mydata = t(mydata[2:nrow(mydata),2:ncol(mydata)])
mydata <- as.data.frame(apply(mydata,FUN= as.numeric,MARGIN=c(1,2)))
# stuff = ordered(mydp,levels = c("young","mature"))
# orgData = as.numeric(mydata[1:nrow(mydata),2:ncol(mydata)])
mydp= NULL
orgData= data.frame()
mean_cfu=NULL
mydp.age = NULL
for (i in 1:ncol(mydata)){
mean_cfu = rbind(mean_cfu,mean(mydata[1:3,i],na.rm=T))
mean_cfu = rbind(mean_cfu,mean(mydata[4:6,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[1:3,i],na.rm=T))
mydp = rbind(mydp,sd(mydata[4:6,i],na.rm =T))
mydp.age =rbind(mydp.age,age[1])
mydp.age = rbind(mydp.age,age[4])
}
mydp = cbind(rep(colnames(mydata[,1:ncol(mydata)]),each =2),mean_cfu,mydp,mydp.age)
colnames(mydp) = c("type","cfu","stdev","age")
orgData.names = as.data.frame(rep(colnames(mydata),each = 6))
orgData.age = as.data.frame(rep(age, times = ncol(mydata)))
orgData = unlist(mydata)
names(orgData)= rep_len(NA, length(orgData))
orgData = cbind(orgData.names,orgData,orgData.age)
colnames(orgData) = c("type","cfu","age")
rm(orgData.names,age,orgData.age,mydp.age,i,mean_cfu)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
}
##ANOVA for young and old
{
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#pass if p>0.05
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
anovaModel$model$mixed = make.unique(as.character(anovaModel$model$mixed))
hsd
}
orgData = orgData[-21,]
View(orgData)
# orgData = as.data.frame(orgData,stringsAsFactor =F)
# orgData[,3]=as.list.factor(orgData[,3])
# orgData[,3] = factor(orgData[,3],levels = c("2","1"), ordered= T, labels = c("young","mature"))
# orgData[,1] = as.factor(orgData[,1])
mixed <- with(orgData, interaction(type, age))
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
##if it fails
orgData[,2]=log10(orgData[,2])
anovaModel = aov(cfu ~ mixed, data = orgData)
summary(anovaModel)
#test for normality of the residuals
orgData.lm = lm(cfu ~ mixed, data = orgData)
orgData.res = resid(orgData.lm)
names(orgData.res)= orgData[,1]
shapiro.test(orgData.res)
shapiro.test(resid(anovaModel))
#tests for homegeneity of variance, null hypothesis: homogeneity of variance
library(car)
leveneTest(cfu ~ mixed, data=orgData) #passes if p>0.05 thus variance if homogenous
bartlett.test(cfu ~ mixed, data=orgData) #if you can run this run this but is more fickle
#POST-HOC TESTING
#only if your data satisfy the assumptions and the ANOVA returned a significant result
library(agricolae)
TukeyHSD(anovaModel) #gives p values for pair-wise comparisons
print(HSD.test(anovaModel, alpha = 0.05,trt ="mixed")) #gives letter codes but no p values
#Reset and read the data (row,col)
rm(list=ls())
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
write.csv(newData,"analyzed.csv")
}
makeAMATable("AMA-18-2.csv")
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
}
makeAMATable("AMA-18-2.csv")
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
makeAMATable("AMA-18-2.csv")
data = makeAMATable("AMA-18-2.csv")
View(data)
apply(df, 2, function(x) x - x[2])
df_new <- as.data.frame(lapply(data, FUN=function(x) x-x[1]))
View(df_new)
#Reset and read the data (row,col)
rm(list=ls())
makeAMATable = function(filename, everyHour=2,blankName="Blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
data = makeAMATable("AMA-18-2.csv")
filename = "AMA-18-2.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
rm(mydata)
rm(data)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
View(mydata)
filename = "AMA-18-2v2.csv"
data = makeAMATable("AMA-18-2v2.csv")
View(data)
#Reset and read the data (row,col)
rm(list=ls())
data = makeAMATable("AMA-18-2v2.csv")
mydata <- read.table("AMA-18-2v2.csv",sep = ",", header=TRUE,row.names =1, check.names = F)
rownames(mydata)= (0:192*15)/60 #Make the row names representative of hours
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)=="Blank"])
newData = mydata[9:193,colnames(mydata)!="Blank"] - blankAvg
myData = mydata[9:193,colnames(mydata)!="Blank"] - blankAvg
mydata = mydata[9:193,colnames(mydata)!="Blank"] - blankAvg
rm(myData)
rm(newData)
blankAvg = as.numeric(mydata[,1])
df = mydata-blankAvg
blankAvg = as.numeric(mydata[1,])
df = mydata-blankAvg
View(mydata)
View(df)
rm(df)
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
View(df)
df = df+mean(mydata[1,])
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
blankAvg = mean(mydata[1,])
View(mydata)
blankAvg = mean(as.numeric(mydata[1,]))
df = df+mean(as.numeric(mydata[1,]))
View(df)
blankAvg = round(blankAvg,digits= 6)
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
blankAvg = as.numeric(mydata[1,])
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
df = df+round(mean(as.numeric(mydata[1,])),digits=6)
blankAvg = as.numeric(mydata[1,])
df = data.frame()
for (i in 1:185){
df = rbind(df,blankAvg)
}
df = mydata-df
df = df+round(mean(as.numeric(mydata[1,])),digits=5)
df = df[as.numeric(rownames(newData))%%2==0,]
df = df[as.numeric(rownames(df))%%2==0,]
write.csv(df, "analyzed.csv")
filename = "AMA-18-4.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
#Reset and read the data (row,col)
rm(list=ls())
mydata <- read.table(filename,sep = ",", header=TRUE,row.names =1, check.names = F)
mydata <- read.table(filename,sep = ",", header=TRUE, check.names = F)
filename = "AMA-18-4.csv"
mydata <- read.table(filename,sep = ",", header=TRUE, check.names = F)
View(mydata)
#Reset and read the data (row,col)
rm(list=ls())
filename = "AMA-18-4.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
View(mydata)
seq_len(mydata)
len
length(mydata)
length(mydata[1])
length(mydata[,1])
mydata = mydata[colnames(mydata)!="empty"]
View(mydata)
View(mydata)
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:length(mydata[,1])*15)/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
mydata = makeAMATable("AMA-18-4.csv")
mydata = makeAMATable("AMA-18-4.csv")
length(mydata[,1])-1
length(rownames(mydata))
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
mydata = makeAMATable("AMA-18-4.csv")
View(mydata)
x=mydata[,colnames(mydata)==blankName]
blankName = "blank"
x=mydata[,colnames(mydata)==blankName]
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="blank"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = T)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
mydata = makeAMATable("AMA-18-4.csv")
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName="blank*"){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
newData
}
mydata = makeAMATable("AMA-18-4.csv")
write.csv(myData,"analyzed.csv")
write.csv(mydata,"analyzed.csv")
write.csv(mydata,paste0("analyzed_",filename))
View(mydata)
filename = "AMA-18-4.csv"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
x=mydata[,colnames(mydata)==blankName]
#before running this program label blank wells "blank" and empty wells "empty"
makeAMATable = function(filename, everyHour=2,blankName=regexec("blank*")){
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
newData = mydata[,colnames(mydata)!=blankName] - blankAvg
#Select only desired rows
newData = newData[as.numeric(rownames(newData))%%everyHour==0,]
write.csv(newdata,paste0("analyzed_",filename))
newData
}
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
blankName="blank*"
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,colnames(mydata)==blankName])
mydata[,colnames(mydata)==blankName]
blankName=regexpr("blank*")
blankName=regexpr("blank"*)
View(mydata)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = T)
x = "blank.1"
y = strsplit(x,".")
View(y)
y
y = strsplit(x,"//.")
y
y = strsplit(x,"\\.")
y
y = strsplit(x,"\\.")[1]
y
y = strsplit(x,"\\.")[[1]][1]
y
x = c("blank.1","blank.2")
y = strsplit(x,"\\.")[[1]][1]
y
y = strsplit(x,"\\.")[1]
y
y = strsplit(x,"\\.")
y
unlist(y)
y = unlist(y)
y = strsplit(x,"\\.")
y = strsplit(x,"\\.")
x = c("blank","blank.1","blank.2","blank.3")
y = strsplit(x,"\\.")
y
subset(y,1)
y = y[,1]
dim(y)
y = as.data.frame(y)
y
y = y[1,]
y
y = as.data.frame(strsplit(x,"\\."))[1,]
y
#Fix column names
colnames(mydata) = as.data.frame(strsplit(colnames(mydata),"\\."))[1,]
colnames(mydata)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
colnames(mydata) = as.data.frame(strsplit(colnames(mydata),"\\."))[1,]
View(mydata)
as.data.frame(strsplit(colnames(mydata),"\\."))[1,]
as.data.frame(strsplit(colnames(mydata),"\\."))
View(mydata)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
as.data.frame(strsplit(colnames(mydata),"\\."))
as.data.frame(strsplit(colnames(mydata),"\\."))[2,]
#Fix column names
colnames(mydata) = as.data.frame(strsplit(colnames(mydata),"\\."))[2,]
View(mydata)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
colnames(mydata) = as.character(as.data.frame(strsplit(colnames(mydata),"\\."))[2,])
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
as.character(as.data.frame(strsplit(colnames(mydata),"\\."))[2,])
View(mydata)
as.character(as.data.frame(strsplit(colnames(mydata),"\\."))[1,])
as.character(as.data.frame(strsplit(colnames(mydata),"\\."))
as.character(as.data.frame(strsplit(colnames(mydata),"\\."))
as.data.frame(strsplit(colnames(mydata),"\\.")
as.data.frame(strsplit(colnames(mydata),"\\."))
as.data.frame(strsplit(colnames(mydata),"\\."))
x = as.data.frame(strsplit(colnames(mydata),"\\."))
View(x)
x = x[2,]
x
View(x)
unlist(x)
View(x)
unlist(x[1,])
colnames(x) = c()
View(x)
as.data.frame(strsplit(colnames(mydata),"\\.")
as.data.frame(strsplit(colnames(mydata),"\\."))
as.data.frame(strsplit(colnames(mydata),"\\."))
x = as.data.frame(strsplit(colnames(mydata),"\\."))
colnames(x) = C()
View(x)
x = as.matrix(strsplit(colnames(mydata),"\\."))
x
View(mydata)
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = "^blank.*",colnames(mydata))])
grepl(pattern = "^blank.*")
mydata[,grepl(pattern = "^blank.*",colnames(mydata)
mydata[,grepl(pattern = "^blank.*",colnames(mydata))
mydata[,grepl(pattern = "^blank.*",colnames(mydata))
mydata[,grepl(pattern = "^blank.*",colnames(mydata))]
mydata[,grepl(pattern = "^blank.*",colnames(mydata))]
filename = "AMA-18-4.csv"
blankName="^blank.*"
everyHour=2
mydata <- read.table(filename,sep = ",", header=TRUE,row.names = 1, check.names = F)
rownames(mydata)= (0:(length(mydata[,1])-1))*15/60 #Make the row names representative of hours
#Fix column names
mydata = mydata[colnames(mydata)!="empty"] #remove columns labelled empty
#Mean subtract the mean of the blanks from each row
blankAvg = rowMeans(mydata[,grepl(pattern = blankName,colnames(mydata))])
newdata = mydata[,mydata[,grepl(pattern = blankName,colnames(mydata),invert =T)]] - blankAvg
mydata[,mydata[,grepl(pattern = blankName,colnames(mydata),invert =T)]]
newdata = mydata[,grepl(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
mydata[,mydata[,grepl(pattern = blankName,colnames(mydata),invert =T)]]
mydata[,grepl(pattern = blankName,colnames(mydata),invert =T)]
mydata[,grepl(pattern = blankName,colnames(mydata))]
mydata[,grep(pattern = blankName,colnames(mydata),invert =T)]
newdata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
View(mydata)
newdata[192,1]==(mydata[192,5]-blankAvg[192])
mydata = mydata[,grep(pattern = blankName,colnames(mydata),invert =T)] - blankAvg
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(newData))%%everyHour==0,]
###this shit doesn't work yet
mydata = mydata[as.numeric(rownames(mydata))%%everyHour==0,]
write.csv(mydata,paste0("analyzed_",filename))
mydata = mydata[2:24,]
write.csv(mydata,paste0("analyzed_",filename))
write.csv(mydata,paste0("analyzed_",filename))
